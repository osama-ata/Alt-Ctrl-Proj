import locale
from typing import Optional, Any, ClassVar
from pydantic import BaseModel, Field


class ActType(BaseModel):
    # Unique ID generated by the system.
    actv_code_type_id: Optional[int] = Field(default=None, alias="actv_code_type_id")
    # The maximum number of characters allowed for values of this Activity Code.
    actv_short_len: Optional[float] = Field(default=None, alias="actv_short_len") # Parsed with locale.atof
    # Sequence number for sorting.
    seq_num: Optional[int] = Field(default=None, alias="seq_num")
    # Each Activity Code has a list of possible values, any of which can be assigned to an activity. Activity
    # Codes allow you to classify and categorize activities.
    actv_code_type: Optional[str] = Field(default=None, alias="actv_code_type")
    # Identifies the project which owns this Activity Code (if this is a
    # project-level Activity Code).
    proj_id: Optional[int] = Field(default=None, alias="proj_id")
    # EPS Id element that
    wbs_id: Optional[str] = Field(default=None, alias="wbs_id") # Kept as string based on original parsing
    actv_code_type_scope: Optional[str] = Field(default=None, alias="actv_code_type_scope")

    data: Any = Field(default=None, exclude=True)

    def get_id(self): # This method might be removable if actv_code_type_id is directly accessible.
        return self.actv_code_type_id

    def get_tsv(self) -> list:
        model_data = self.model_dump(by_alias=True)
        return [
            "%R",
            model_data.get("actv_code_type_id") if model_data.get("actv_code_type_id") is not None else "",
            model_data.get("actv_short_len") if model_data.get("actv_short_len") is not None else "",
            model_data.get("seq_num") if model_data.get("seq_num") is not None else "",
            model_data.get("actv_code_type") if model_data.get("actv_code_type") is not None else "",
            model_data.get("proj_id") if model_data.get("proj_id") is not None else "",
            model_data.get("wbs_id") if model_data.get("wbs_id") is not None else "",
            model_data.get("actv_code_type_scope") if model_data.get("actv_code_type_scope") is not None else "",
        ]

    def __repr__(self):
        return self.actv_code_type if self.actv_code_type is not None else super().__repr__()
