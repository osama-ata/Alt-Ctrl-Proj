import locale
from typing import Optional, Any, ClassVar
from pydantic import BaseModel, Field
from xer_parser.model.acttypes import ActTypes


class ActivityCode(BaseModel):
    # Unique ID generated by the system.
    actv_code_id: Optional[int] = Field(default=None, alias="actv_code_id")
    # The parent Activity Code value in the user code value hierarchy.
    parent_actv_code_id: Optional[int] = Field(default=None, alias="parent_actv_code_id")
    # The Activity Code type id acts as foreign key to activity code types table
    actv_code_type_id: Optional[int] = Field(default=None, alias="actv_code_type_id")
    # The description of an Activity Code value.
    actv_code_name: Optional[str] = Field(default=None, alias="actv_code_name")
    # The value of the activity code.
    short_name: Optional[str] = Field(default=None, alias="short_name")
    # Sequence number for sorting.
    seq_num: Optional[int] = Field(default=None, alias="seq_num")
    color: Optional[str] = Field(default=None, alias="color")
    total_assignments: Optional[float] = Field(default=None, alias="total_assignments") # Parsed with locale.atof
    
    data: Any = Field(default=None, exclude=True)


    def get_id(self): # This method might be removable if actv_code_id is directly accessible and used.
        return self.actv_code_id

    def get_tsv(self) -> list:
        model_data = self.model_dump(by_alias=True)
        return [
            "%R",
            model_data.get("actv_code_id") if model_data.get("actv_code_id") is not None else "",
            model_data.get("parent_actv_code_id") if model_data.get("parent_actv_code_id") is not None else "",
            model_data.get("actv_code_type_id") if model_data.get("actv_code_type_id") is not None else "",
            model_data.get("actv_code_name") if model_data.get("actv_code_name") is not None else "",
            model_data.get("short_name") if model_data.get("short_name") is not None else "",
            model_data.get("seq_num") if model_data.get("seq_num") is not None else "",
            model_data.get("color") if model_data.get("color") is not None else "",
            model_data.get("total_assignments") if model_data.get("total_assignments") is not None else "",
        ]

    @property
    def type(self):
        # This will need to be updated if ActTypes becomes a Pydantic collection
        # and is accessed via self.data, e.g., self.data.acttypes.find_by_id(...)
        # For now, assuming ActTypes.find_by_id is a static/class method that can be called.
        if self.actv_code_type_id is None:
            return None
        return ActTypes.find_by_id(self.actv_code_type_id)

    def __repr__(self):
        id_str = str(self.actv_code_id) if self.actv_code_id is not None else "None"
        short_name_str = self.short_name if self.short_name is not None else ""
        name_str = self.actv_code_name if self.actv_code_name is not None else ""
        
        if short_name_str and name_str:
            return f"{id_str} - {short_name_str} - {name_str}"
        elif short_name_str:
            return f"{id_str} - {short_name_str}"
        elif name_str:
            return f"{id_str} - {name_str}"
        return id_str
