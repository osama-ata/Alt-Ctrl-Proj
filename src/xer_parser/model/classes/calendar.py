import locale
from typing import Optional, Any
from datetime import datetime
from pydantic import BaseModel, Field


# Assuming CalendarData will also be refactored or its usage adapted.
# For now, direct parsing from clndr_data in __init__ is removed.
# from xer_parser.model.classes.calendar_data import CalendarData


class Calendar(BaseModel):
    # Unique ID generated by the system.
    clndr_id: Optional[int] = Field(default=None, alias="clndr_id")
    # Identifies the default global calendar (applies to global calendars only). 'Y' or 'N'
    default_flag: Optional[str] = Field(default=None, alias="default_flag")
    # The name of the calendar.
    clndr_name: Optional[str] = Field(default=None, alias="clndr_name")
    proj_id: Optional[int] = Field(default=None, alias="proj_id") # Changed to int
    # The global calendar to which this calendar is linked.
    base_clndr_id: Optional[int] = Field(default=None, alias="base_clndr_id") # Changed to int
    # Date of last changes to calendar.
    last_chng_date: Optional[datetime] = Field(default=None, alias="last_chng_date")
    # The calendar type - either global, resource, or project.
    clndr_type: Optional[str] = Field(default=None, alias="clndr_type")
    # The number of work hours per day.
    day_hr_cnt: Optional[float] = Field(default=None, alias="day_hr_cnt")
    # The number of work hours per week.
    week_hr_cnt: Optional[float] = Field(default=None, alias="week_hr_cnt")
    # The number of work hours per month.
    month_hr_cnt: Optional[float] = Field(default=None, alias="month_hr_cnt")
    # The number of work hours per year.
    year_hr_cnt: Optional[float] = Field(default=None, alias="year_hr_cnt")
    rsrc_private: Optional[str] = Field(default=None, alias="rsrc_private") 
    clndr_data: Optional[str] = Field(default=None, alias="clndr_data") # Raw calendar data string

    data: Any = Field(default=None, exclude=True)

    def _format_date_for_tsv(self, dt_val: Any) -> str:
        if dt_val is None: return ""
        if isinstance(dt_val, datetime): return dt_val.strftime("%Y-%m-%d %H:%M")
        return str(dt_val)

    def get_tsv(self) -> list:
        model_data = self.model_dump(by_alias=True) 
        
        def s(value: Any) -> str:
            return "" if value is None else str(value)
        
        return [
            "%R",
            s(model_data.get("clndr_id")),
            s(model_data.get("default_flag")),
            s(model_data.get("clndr_name")),
            s(model_data.get("proj_id")),
            s(model_data.get("base_clndr_id")),
            self._format_date_for_tsv(self.last_chng_date),
            s(model_data.get("clndr_type")),
            s(model_data.get("day_hr_cnt")),
            s(model_data.get("week_hr_cnt")),
            s(model_data.get("month_hr_cnt")),
            s(model_data.get("year_hr_cnt")),
            s(model_data.get("rsrc_private")),
            s(model_data.get("clndr_data")),
        ]

    def __repr__(self):
        name = self.clndr_name if self.clndr_name else "Calendar"
        day_hr = self.day_hr_cnt if self.day_hr_cnt is not None else "N/A"
        c_data_preview = (self.clndr_data[:50] + "...") if self.clndr_data else ""
        return f"<{name} id={self.clndr_id or 'N/A'} day_hr={day_hr} data='{c_data_preview}'>"

    class Config:
        arbitrary_types_allowed = True
