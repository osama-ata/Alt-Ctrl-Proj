import logging
from typing import Optional, Any
from pydantic import BaseModel, Field

# Initialize logger
logger = logging.getLogger(__name__)


class OBS(BaseModel):
    # Unique ID generated by the system.
    obs_id: Optional[int] = Field(default=None, alias="obs_id")
    # The parent OBS value in the OBS hierarchy.
    parent_obs_id: Optional[int] = Field(default=None, alias="parent_obs_id")
    # Global Unique Identifier generated by the system.
    guid: Optional[str] = Field(default=None, alias="guid")
    # Sequence number used for sorting.
    seq_num: Optional[int] = Field(default=None, alias="seq_num")
    # The name of the person/role in the organization.
    obs_name: Optional[str] = Field(default=None, alias="obs_name")
    # The description of the person/role in the organization.
    obs_descr: Optional[str] = Field(default=None, alias="obs_descr")

    data: Any = Field(default=None, exclude=True) # Standard data field

    def get_tsv(self) -> list:
        model_data = self.model_dump(by_alias=True)
        return [
            "%R",
            str(model_data.get("obs_id", "")) if model_data.get("obs_id") is not None else "",
            str(model_data.get("parent_obs_id", "")) if model_data.get("parent_obs_id") is not None else "",
            model_data.get("guid", "") if model_data.get("guid") is not None else "",
            str(model_data.get("seq_num", "")) if model_data.get("seq_num") is not None else "",
            model_data.get("obs_name", "") if model_data.get("obs_name") is not None else "",
            model_data.get("obs_descr", "") if model_data.get("obs_descr") is not None else "",
        ]

    def get_id(self): # Kept for now
        return self.obs_id

    def __repr__(self):
        name = self.obs_name if self.obs_name is not None else "Unknown OBS"
        return f"<{name} (ID: {self.obs_id if self.obs_id is not None else 'N/A'})>"
