from typing import Optional, Any
from pydantic import BaseModel, Field


class Currency(BaseModel):
    # Unique ID generated by the system.
    curr_id: Optional[int] = Field(default=None, alias="curr_id")
    # The number of decimal places displayed.
    decimal_digit_cnt: Optional[int] = Field(default=None, alias="decimal_digit_cnt")
    # The symbol used to identify each defined currency.
    curr_symbol: Optional[str] = Field(default=None, alias="curr_symbol")
    # The decimal symbol displayed.
    decimal_symbol: Optional[str] = Field(default=None, alias="decimal_symbol")
    # The symbol used to group the numbers.
    digit_group_symbol: Optional[str] = Field(default=None, alias="digit_group_symbol")
    # The symbol used to display a positive currency.
    pos_curr_fmt_type: Optional[str] = Field(default=None, alias="pos_curr_fmt_type")
    # The symbol used to display a negative currency.
    neg_curr_fmt_type: Optional[str] = Field(default=None, alias="neg_curr_fmt_type")
    # The names of all defined currencies. (Original XER field name is curr_type)
    curr_type: Optional[str] = Field(default=None, alias="curr_type")
    # The identifiers for all currencies defined in Project Management.
    curr_short_name: Optional[str] = Field(default=None, alias="curr_short_name")
    # Currency Group Digit Count
    group_digit_cnt: Optional[int] = Field(default=None, alias="group_digit_cnt") # Assuming int
    # The current exchange rate between the selected currency and the base currency.
    base_exch_rate: Optional[float] = Field(default=None, alias="base_exch_rate") # Assuming float

    data: Any = Field(default=None, exclude=True)

    def get_tsv(self) -> list:
        model_data = self.model_dump(by_alias=True)
        return [
            "%R",
            str(model_data.get("curr_id", "")) if model_data.get("curr_id") is not None else "",
            str(model_data.get("decimal_digit_cnt", "")) if model_data.get("decimal_digit_cnt") is not None else "",
            model_data.get("curr_symbol", "") if model_data.get("curr_symbol") is not None else "",
            model_data.get("decimal_symbol", "") if model_data.get("decimal_symbol") is not None else "",
            model_data.get("digit_group_symbol", "") if model_data.get("digit_group_symbol") is not None else "",
            model_data.get("pos_curr_fmt_type", "") if model_data.get("pos_curr_fmt_type") is not None else "",
            model_data.get("neg_curr_fmt_type", "") if model_data.get("neg_curr_fmt_type") is not None else "",
            model_data.get("curr_type", "") if model_data.get("curr_type") is not None else "",
            model_data.get("curr_short_name", "") if model_data.get("curr_short_name") is not None else "",
            str(model_data.get("group_digit_cnt", "")) if model_data.get("group_digit_cnt") is not None else "",
            str(model_data.get("base_exch_rate", "")) if model_data.get("base_exch_rate") is not None else "",
        ]

    def __repr__(self):
        short_name = self.curr_short_name if self.curr_short_name is not None else ""
        curr_type_val = str(self.curr_type) if self.curr_type is not None else ""
        return f"{short_name} {curr_type_val}".strip()
